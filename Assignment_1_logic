{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# General Information"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This is the first exercise in the KI course. You will have to implement a few algorithms from the lecture. The assignment will be graded, but it should also serve for you to understand the concepts more deeply and experiment and play around with the ideas. \n",
    "\n",
    "You can add code and cells at any point in the notebook; the only important thing for the grading to work is that you don't change the function names. The signature of the functions (the meaning and order of function arguments and return values is given, and should not be changed). Please do not use special ipython functionality, such as [ipython magics](http://ipython.org/ipython-doc/dev/interactive/tutorial.html).\n",
    "\n",
    "Practical help with the assignments will be available in moodle and during the tutorial sessions, which will be anounced on moodle and on the KI website.\n",
    "\n",
    "Some of the exercises will not get a visible grade on the course website, and will only be graded after the assignment deadline. Also, the grades might change slightly if we realize that our evaluation was not optimal."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# The GSAT algorithm"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this exercise, you will implement an algorithm to find an approximate solution for the 3-CNF problem, that is, the problem of finding a satisfying assignment for a logical sentence of the form \n",
    "$$\n",
    "\\left(P \\vee Q \\vee \\neg S\\right) \\wedge \\left(R \\vee T \\vee \\neg P\\right) \\wedge \\left(R \\vee T \\vee \\neg S\\right).\n",
    "$$\n",
    "\n",
    "The GSAT algorithm is an instance of a class of algorithms called [*Local Search Algorithms*](http://en.wikipedia.org/wiki/WalkSAT), which explore the state space of boolean assignments to variables by considering a locally optimal, or *greedy* change to that assignment.\n",
    "\n",
    "3-CNF formulas are in CNF form, and each clause contains exactly 3 literals. The GSAT algorithm starts with a random truth assignment to the symbols, and then tries to find a satisfying assignment by changing one truth value at a time. The symbol to be changed is selected such that the maximum number of clauses is satisfied after each step. If there are multiple variables that satisfy the same number of clauses, the decision between them is arbitrary.\n",
    "\n",
    "Since the trajectory of the state (the truth assignments to each variable in each step of the algorithm) depends heavily on the initial state, the algorithm is restarted several times with different initial states.\n",
    "\n",
    "The algorithm performance is influenced by two important parameters: $C$, the number of clauses, and $N$, the number of proposition symbols."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Representing 3-CNF problems"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For this exercise, 3-CNFs are represented as a set of clauses, where each clause consists of two sets: The first one contains the indices of the variables in the clause that are nonnegated; the second one the indices for the variables that appear negated. The state is simply a list of boolean values, of length N. \n",
    "\n",
    "For the example given above, that would be:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "state = [False, False, True, True, False]\n",
    "\n",
    "# variables in the order (P, Q, R, S, T)\n",
    "problem = [\n",
    "           ({0, 1}, {3, }),\n",
    "           ({2, 4}, {0, }),\n",
    "           ({2, 4}, {3, })\n",
    "           ]\n",
    "           "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Complexity"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Which complexity class does the problem of satifisbility of 3-CNF formulas belong to? Select the most concise answer. Return a string from your function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def three_cnf_complexity():\n",
    "    return 'NP hard'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "How many evaluations have to be made in every step of the algorithm (assuming that the satisfiability of a clause can be checked in 1 step)? Return a sympy function in the variables $N$ and $C$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "from sympy import var\n",
    "var('N C')\n",
    "def gsat_step_complexity(N, C):\n",
    "    return N * C"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Is this algorithm complete? Return `True` or `False` (as `bool` values)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def gsat_complete():\n",
    "    return False"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Generating Problems"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Generate random instances of 3-CNF problems, given the number of clauses `n_clauses` and the number of variables `n_vars`. Note that the representation of the positive and negative literals for each clause as sets does not allow clauses like $P \\wedge P \\wedge Q$. Your random problems should always have 3 different literals in the set representation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 235,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "IPython.notebook.set_autosave_interval(0)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Autosave disabled\n"
     ]
    }
   ],
   "source": [
    "%autosave 0\n",
    "import random as rd\n",
    "import numpy as np\n",
    "def generate_random_problem(n_vars, n_clauses):\n",
    "    num_firstClass = [rd.randint(0,3) for i in xrange(n_clauses)]\n",
    "    initialState = [rd.sample(range(0, n_vars), 3) for i in xrange(n_clauses)]\n",
    "    initialState = np.ravel(initialState)\n",
    "\n",
    "    problem  = []\n",
    "    for i in xrange(n_clauses):\n",
    "        set1 = set(initialState[3 * i + j] for j in xrange(num_firstClass[i]))\n",
    "        set2 = set(initialState[3 * i + num_firstClass[i] + j] for j in xrange(3 - num_firstClass[i]))\n",
    "        problem.append((set1, set2))\n",
    "            \n",
    "    return problem"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Can you think of a simple way to simplify the problem in cases where clauses are tautological?\n",
    "Write a function that simplifies the problem accordingly."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 236,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def simplify_three_cnf(problem):\n",
    "    simplified_problem = []\n",
    "\n",
    "    for clauseInPro in problem:\n",
    "        if not(0 < len(clauseInPro[0]) < 3):\n",
    "            simplified_problem.append(clauseInPro)\n",
    "            continue\n",
    "        if not(clauseInPro[0] & clauseInPro[1]):\n",
    "            simplified_problem.append(clauseInPro)\n",
    "\n",
    "    return simplified_problem"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Implementing GSAT"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Write a function that generates the initial state for a 3-CNF SAT problem. It should be truly random, so that calling it multiple times gives different results."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 224,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def get_initial_state(n_vars, n_clauses):\n",
    "    initial_state = [bool(rd.randint(0, 1)) for i in xrange(n_vars)]\n",
    "    return initial_state"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, write a function that evaluates the truth value of a single clause, and returns whether it is satisfied:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 225,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def eval_clause(state, clause):\n",
    "    for elementSet1 in clause[0]:\n",
    "        if state[elementSet1]:\n",
    "            return True\n",
    "    for elementSet2 in clause[1]:\n",
    "        if not(state[elementSet2]):\n",
    "            return True\n",
    "    return False"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Building on this, add a function that evaluates the truth value of a whole 3-CNF formula `problem` given the `state`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 226,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def eval_three_cnf(problem, state):\n",
    "    for clauseInPro in problem:\n",
    "        if not(eval_clause(state, clauseInPro)):\n",
    "            return False\n",
    "    return True"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Stopping Condition"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Write a function that checks if a solution, i.e. a state that satisfies all clauses, has been found. The function should return the Boolean value `True` if the algorithm is done, and `False` otherwise."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 227,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def am_i_done(problem, state):\n",
    "    if eval_three_cnf(problem, state):\n",
    "        return True\n",
    "    return False"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Putting together the algorithm"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Write a function that runs one chain of GSAT for a given maximum number of iterations `max_iter`. It should return the best encountered state and whether the algorithm succeeded in finding a satisfying assignment or not, and it should return as early as possible."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 232,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "import copy as cp\n",
    "def run_gsat_chain(problem, state, max_iter):\n",
    "\n",
    "    if am_i_done(problem, state):\n",
    "        return state, True\n",
    "    \n",
    "    numTrueClausesFinal = 0\n",
    "    \n",
    "    for i in xrange(max_iter):\n",
    "        if i > len(state) - 1:\n",
    "            break\n",
    "\n",
    "        realState = cp.copy(state)\n",
    "        realState[i] = not(realState[i])\n",
    "\n",
    "        if am_i_done(problem, realState):\n",
    "            return realState, True\n",
    "\n",
    "        numTrueClauses = 0\n",
    "        for clausesInPro in problem:\n",
    "            if eval_clause(realState, clausesInPro):\n",
    "                numTrueClauses = numTrueClauses + 1\n",
    "\n",
    "        if numTrueClausesFinal <= numTrueClauses:\n",
    "            stateFinal = realState\n",
    "            numTrueClausesFinal = numTrueClauses\n",
    "\n",
    "    return stateFinal, False"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, write a function that generates an initial state in `n_vars` variables for the multiple chains (at most `max_n_chains` of them), runs each of the chains, and returns `success` (as a Boolean variable) and a satisfying assignment if there was one, or else the best assignment that was found."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 234,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(True, [False, True, True, True, False, False, True, False, False, False])\n"
     ]
    }
   ],
   "source": [
    "def run_gsat(problem, max_iter, n_vars, max_n_chains):\n",
    "    numTrueClausesFinal = 0\n",
    "    numClauses = len(problem)\n",
    "    for i in xrange(max_n_chains):\n",
    "        state, success = run_gsat_chain(problem, get_initial_state(n_vars, numClauses), max_iter)\n",
    "        if success:\n",
    "            return True, state\n",
    "\n",
    "        numTrueClauses = 0\n",
    "        \n",
    "        for clauseInPro in problem:\n",
    "            if eval_clause(state, clauseInPro):\n",
    "                numTrueClauses = numTrueClauses + 1\n",
    "\n",
    "        if numTrueClausesFinal <= numTrueClauses:\n",
    "            numTrueClausesFinal = numTrueClauses\n",
    "            satisfying_assignment = state\n",
    "\n",
    "    return False, satisfying_assignment"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Experiment"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Experiment! Generate random problems of different sizes by varying $C$ and $N$ for your assignment function and use the timing functions of python to check the runtimes of the algorithm for different problems, and determine what feasible values for `max_iter` and `max_n_chains` could be. Make a plot of typical runtimes and their statistics (`np.mean` and `np.median` can be useful here) versus the algorithm parameters.\n",
    "\n",
    "Timing a function works like so:\n",
    "\n",
    "```\n",
    "def foo():\n",
    "    pass\n",
    "\n",
    "import timeit\n",
    "timeit.timeit(foo)    \n",
    "```\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 206,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.16141796112060547"
      ]
     },
     "execution_count": 206,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def foo():\n",
    "    pass\n",
    "\n",
    "import timeit\n",
    "timeit.timeit(foo)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.9"
  },
  "name": "Assignment_1_logic"
 },
 "nbformat": 4,
 "nbformat_minor": 0
}