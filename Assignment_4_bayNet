{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Assigment III : Bayesian Networks"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this exercise you will get acquainted with some concepts in from probability and graphical models, specifically Bayesian Networks. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Recall from the lectures that  Bayesian Networks are composed of Conditional Probability Tables. We provide a basic implementation of such tables named under the class `Cpt`.\n",
    "\n",
    "(You might see an error about dot_parser after executing this cell. This is nothing to worry about.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "IPython.notebook.set_autosave_interval(0)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Autosave disabled\n"
     ]
    }
   ],
   "source": [
    "from ai_algorithms.Bayes_exercise import Cpt\n",
    "%autosave 0"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's write a simple conditional probability table for the random variable *Rain* given *Cloudy*, representing $P(\\text{Rain} \\, | \\, \\text{Cloudy})$ . "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\t\tRain\n",
      "| Cloudy   |   False |   True |\n",
      "|:---------|--------:|-------:|\n",
      "| False    |     0.9 |    0.1 |\n",
      "| True     |     0.2 |    0.8 |\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#Here we say that there is a 0.1 probability of raining if there are no clouds, and 0.8 if it is cloudy\n",
    "rain = Cpt('Rain', [[0.9,0.1],\n",
    "                    [0.2,0.8]], \n",
    "           ['Cloudy'])\n",
    "print rain"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's define some other Cpts:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\tCloudy\n",
      "|   False |   True |\n",
      "|--------:|-------:|\n",
      "|     0.6 |    0.4 |\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# We decide that cloudy is not conditioned on any variable other variable, so we define a prior probability for it\n",
    "cloudy = Cpt('Cloudy', [[0.6, 0.4]],[])\n",
    "print cloudy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\t\t\tWetGrass\n",
      "| Rain   | Sprinkler   |   False |   True |\n",
      "|:-------|:------------|--------:|-------:|\n",
      "| False  | False       |     0.8 |    0.2 |\n",
      "| False  | True        |     0.4 |    0.6 |\n",
      "| True   | False       |     0.3 |    0.7 |\n",
      "| True   | True        |     0.1 |    0.9 |\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Note that WetGrass is conditioned on two variables\n",
    "wetgrass = Cpt('WetGrass', [[0.8,0.2],\n",
    "                            [0.4,0.6],\n",
    "                            [0.3,0.7],\n",
    "                            [0.1,0.9]], ['Rain', 'Sprinkler'])\n",
    "print wetgrass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\t\tSprinkler\n",
      "| Cloudy   |   False |   True |\n",
      "|:---------|--------:|-------:|\n",
      "| False    |     0.2 |    0.8 |\n",
      "| True     |     0.7 |    0.3 |\n",
      "\n"
     ]
    }
   ],
   "source": [
    "sprinkler = Cpt('Sprinkler', [[0.2,0.8],                          \n",
    "                              [0.7,0.3]], ['Cloudy'])\n",
    "print sprinkler"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note that each row in the in the CPT needs to add up to 1. Otherwise, an error will be raised. \n",
    "\n",
    "You can get a row from the CPT by using the `conditioned` method, which accepts a dict with the state of the conditioned variables. \n",
    "You must specify **all conditioned variables**, else you will get an error."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.3, 0.7]"
      ]
     },
     "execution_count": 132,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "conditioned_state = dict(Rain=True, Sprinkler=False)\n",
    "wetgrass.conditioned(conditioned_state)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Your first task will be to obtain samples from the CPT, given a specific state of the conditioned variables.\n",
    "Again, you can obtain the probabilities of a specific row of the CPT using the `conditioned` method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.1, 0.9]"
      ]
     },
     "execution_count": 133,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "wetgrass.conditioned(dict(Rain=True, Sprinkler=True))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exercise 1: Sampling a CPT [6 P.]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Given a Cpt and a configuration, implement a function to obtain samples from the univariate distribution $P(x\\,|\\,\\text{conditioned_variables})$. The output is either of the boolean constants `True` or `False`, e.g:\n",
    "```\n",
    "sample_cpt(wetgrass, dict(Rain=True,Sprinkler=True))\n",
    "```\n",
    "could (for example) return \n",
    "```\n",
    "True\n",
    "```\n",
    "The function takes a conditional probability table `cpt` for an arbitrary random variable. Let's call the random variable RV for the sake of explanation. The function also takes the evidence variables as its second argument `conditioned`. The function shall use the given `cpt` to calculate the probability of the two possible outcomes of RV (True or False) and then return an actual outcome according to the calculated probability.\n",
    "\n",
    "Example: If the function calculates $P(RV=\\mathrm{True}\\, |\\, \\mathrm{evidence}) = 0.2$ then the function shall return `True` in 20% of the function calls (20% probability) and `False` in 80% of the function calls (80% probability)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Recall that in Python, you can generate random numbers by using the function `random` from the module `random`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.48176223061903445"
      ]
     },
     "execution_count": 134,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import random\n",
    "random.random()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def sample_cpt(cpt, conditioned):\n",
    "    '''Returns a sample (True/False) from the CPT, given the conditioned variables'''\n",
    "    f, t = cpt.conditioned(dict(Rain=True, Sprinkler=True))\n",
    "    if random.random() < f:\n",
    "        return False\n",
    "    else:\n",
    "        return True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# This function is here for convenience and grading, there is no need to modify it. \n",
    "def sample_cpt_multiple(cpt,conditioned,num_samples):\n",
    "    '''Returns multiple samples from the the CPT'''\n",
    "    return [sample_cpt(cpt, conditioned) for _ in range(num_samples)]\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Bayesian Network Class (For exercises 2 to 5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Bayesian Networks are one of the most popular probabilistic graphical models. The are constructed using multiple CPTs. \n",
    "\n",
    "Here we also give an **incomplete implementation** of a Bayesian Network. Your task will be to implement some functions of this class. \n",
    "\n",
    "Dont worry if you do not understand everything that is happening, because you will not need most of it. The implementaion uses the `networkx` library to model the graph underlying the Bayesian Network. You can read its documentation [here](http://networkx.github.io/documentation/networkx-1.9.1/), but for these exercises you should be able to get along with the functions and method described in this notebook."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "import itertools\n",
    "import networkx as nx\n",
    "from networkx import DiGraph\n",
    "from tabulate import tabulate\n",
    "from bitstring import BitArray\n",
    "from IPython.display import Image, display_png\n",
    "\n",
    "class BayesNet(DiGraph, nx.Graph):\n",
    "    def __init__(self, cpts):\n",
    "        DiGraph.__init__(self)\n",
    "        self.cpts = cpts\n",
    "        self.build_graph()\n",
    "\n",
    "    def build_graph(self):\n",
    "        for cpt in self.cpts:\n",
    "            self.add_node(cpt.node, attr_dict=dict(cpt=cpt, texlbl=cpt.node))\n",
    "            for parent in cpt.parents:\n",
    "                self.add_edge(parent, cpt.node)\n",
    "\n",
    "    def marginal_enumeration(self, query, conditioned):\n",
    "        '''Returns the marginal probability P(query | conditioned) of \n",
    "        the query variable given the conditioned variables'''\n",
    "        print \"query: {}, conditioned: {}\".format(query, conditioned)\n",
    "        assert len(query.keys()) == 1, \"Can only have one query variable\"\n",
    "\n",
    "        trueList = []\n",
    "        diffState = list(set(self.node.keys()) - set(query) - set(conditioned))\n",
    "        for i in itertools.product([True, False], repeat=len(diffState)):\n",
    "            trueList.append(i)\n",
    "        dictAssign = [{x:y for x, y in zip(diffState, i)} for i in trueList]\n",
    "\n",
    "        pEventCond = 0\n",
    "        for i in dictAssign:\n",
    "            variables = dict(set(query.items()) ^ set(conditioned.items()) ^ set(i.items()))\n",
    "            pEventCond += self.probability_configuration(variables)\n",
    "\n",
    "        # calculate p(cond)\n",
    "        trueList = []\n",
    "        diffState = list(set(self.node.keys()) - set(conditioned))\n",
    "        for i in itertools.product([True, False], repeat=len(diffState)):\n",
    "            trueList.append(i)\n",
    "        dictAssign = [{x:y for x, y in zip(diffState, i)} for i in trueList]\n",
    "        pCond = 0\n",
    "        for i in dictAssign:\n",
    "            variables = dict(set(conditioned.items()) ^ set(i.items()))\n",
    "            pCond += self.probability_configuration(variables)\n",
    "\n",
    "        return pEventCond / pCond\n",
    "\n",
    "    def probability_configuration(self,assignments):\n",
    "        '''The probability of an assigment of all variables in \n",
    "        the Bayesian Network. '''   \n",
    "        list = assignments.keys()\n",
    "\n",
    "        p = 1\n",
    "\n",
    "        for i in list:\n",
    "            parents = []\n",
    "            for j in list:\n",
    "                if i == j:\n",
    "                    continue\n",
    "                if j in self.node[i]['cpt'].parents:\n",
    "                    parents.append(j)\n",
    "            \n",
    "            condition = {i:assignments[i] for i in parents}\n",
    "\n",
    "            if not assignments[i]:\n",
    "                p *= self.node[i]['cpt'].conditioned(condition)[0]\n",
    "            else:\n",
    "                p *= self.node[i]['cpt'].conditioned(condition)[1]\n",
    "\n",
    "        return p\n",
    "    def forward_sample(self):\n",
    "        '''Computes a sample from the prior distribution. \n",
    "        Returns a dictionary with the state (True/False) of \n",
    "        each variable'''\n",
    "        state = self.node.keys()\n",
    "        trueList = []\n",
    "        for i in itertools.product([True, False], repeat=len(state)):\n",
    "            trueList.append(i)\n",
    "\n",
    "        dictList = [{x:y for x, y in zip(state, i)} for i in trueList]\n",
    "        \n",
    "        numRand = random.random()\n",
    "        \n",
    "        \n",
    "        for i in dictList:\n",
    "            prob = self.probability_configuration(i)\n",
    "            if numRand < prob:\n",
    "                return i\n",
    "            numRand -= prob\n",
    "\n",
    "    def __str__(self):\n",
    "        return '<Bayes Net' + str(self.nodes())+'>'\n",
    "        \n",
    "    def __repr__(self):\n",
    "        return self.__str__()\n",
    "\n",
    "    def as_png(self):\n",
    "        pd = nx.to_pydot(self)\n",
    "        pd.write_png('/tmp/out.png')                \n",
    "        return Image('/tmp/out.png')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To get used to it, lets make a simple Bayesian Network using the Cpts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "bn = BayesNet([cloudy, rain, sprinkler, wetgrass])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can visualize the structure using the following function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "execution_count": 139,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bn.as_png()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Some useful methods and accesors that you have available in the BayesNet class:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Getting all nodes\n",
      "['WetGrass', 'Rain', 'Cloudy', 'Sprinkler']\n",
      "==\n",
      "Accessing the CPT associated to a node\n",
      "\n",
      "\t\tRain\n",
      "| Cloudy   |   False |   True |\n",
      "|:---------|--------:|-------:|\n",
      "| False    |     0.9 |    0.1 |\n",
      "| True     |     0.2 |    0.8 |\n",
      "\n",
      "==\n",
      "Children of a node\n",
      "['Sprinkler', 'Rain']\n",
      "==\n",
      "Parents of a node\n",
      "['Cloudy']\n"
     ]
    }
   ],
   "source": [
    "print('Getting all nodes')\n",
    "print(bn.nodes())\n",
    "print \"==\"\n",
    "print('Accessing the CPT associated to a node')\n",
    "print(bn.node['Rain']['cpt'])\n",
    "print \"==\"\n",
    "print('Children of a node')\n",
    "print(bn.successors('Cloudy'))\n",
    "print \"==\"\n",
    "print('Parents of a node')\n",
    "print(bn.predecessors('Rain'))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we are ready to implement some methods of this class to give it more functionalities!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exercise 2 : Evaluating probabilities in a Bayesian Network [9 P.]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "\n",
    "The most basic thing we can do in a Bayesian Network is to evaluate the probability of a given world state $P(x)$.\n",
    "For this all you need to do is apply the definition of how a Bayesian Network defines probabilities. \n",
    "\n",
    "\n",
    "\n",
    "**Complete the probability_configuration method in the BayesNet class. **\n",
    "\n",
    "The input variable `assignments` will be the a dict with the truth values of **all** variables in the network, e.g.\n",
    "\n",
    "```\n",
    "assignments = dict(Sprinkler=True,WetGrass=False,Rain=True,Cloudy=True)\n",
    "bn.probability_configuration(assignments)\n",
    "```\n",
    "\n",
    "Recall that the name `self` inside a class refers to the object, which in this case will be the `BayesNet` instance.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exercise 3 : Computing a posterior probability (Exact Inference) [24 P.]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If you can compute the probability of a single assignment, you can now compute more advanced queries. \n",
    "Let's say that we split the variables in three groups: x,y,z. Now we are interested in computing queries of type $P(x \\, | \\, z)$. \n",
    "The variables in $x$ will be the query variables. The conditioned variables (fixed) are $z$. The $y$ variables do not appear in the expression, that means we need to *marginalize out* the $y$ variables.\n",
    "\n",
    "** Complete the marginal_enumeration method in the BayesNet class. **\n",
    "\n",
    "Again, the inputs (`query`, `conditioned`) are dictionaries specifying the truth value of each variable in the respective groups. \n",
    "\n",
    "In this exercise, you can assume that ** `query` will just contain one variable**\n",
    "```\n",
    "bn.marginal_enumeration(query=dict(Rain=True), conditioned=dict(WetGrass=False))\n",
    "```\n",
    "\n",
    "**Advice**: Remember from the lectures that you can compute unnormalized probabilities and normalize them afterwards using the complementary query."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Question 1  [3 P.]: \n",
    "*( after you implemented marginal_enumeration)*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's make another simple Bayesian Network"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "execution_count": 141,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "earthquake = Cpt('Earthquake',[[0.999,0.001]], [])\n",
    "godzilla = Cpt('Godzilla', [[0.99,0.01]], [])\n",
    "ground_shakes = Cpt('Ground Shakes', [[0.99,0.01], [0.7,0.3], [0.1,0.9], [0.01,0.99]], ['Godzilla','Earthquake'])\n",
    "bn_gs = BayesNet([earthquake, godzilla, ground_shakes])\n",
    "bn_gs.as_png()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "And observe the following probabilities: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "query: {'Earthquake': True}, conditioned: {'Ground Shakes': True}\n",
      "0.0159943714822\n",
      "query: {'Earthquake': True}, conditioned: {'Godzilla': True, 'Ground Shakes': True}\n",
      "0.001099890011\n"
     ]
    }
   ],
   "source": [
    "print bn_gs.marginal_enumeration(query={'Earthquake':True},conditioned={'Ground Shakes':True})\n",
    "print bn_gs.marginal_enumeration(query={'Earthquake':True},conditioned={'Godzilla':True,'Ground Shakes':True})"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "What is this effect called:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "def question_1():\n",
    "    '''Uncomment one of the following'''\n",
    "    #return 'conditioning'\n",
    "    #return 'explaining away'\n",
    "    return 'marginalization'\n",
    "    #return 'sampling'\n",
    "    pass"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exercise 4: Sampling a Bayes Network with no evidence [10 P.]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If you can already sample from a CPT, it is not much more difficult to sample from the prior of a Bayesian Network. This is also called forward sampling. \n",
    "\n",
    "** Complete the forward_sample method in the BayesNet class. **\n",
    "\n",
    "A sample will be specified as a dictionary with the state of each node, e.g.\n",
    "```\n",
    "bn.forward_sample()\n",
    "```\n",
    "returns\n",
    "```\n",
    "dict(Rain=True, WetGrass=False, Sprinkler=True, Cloudy=True)\n",
    "```\n",
    "\n",
    "You should use the functions to get parents and children of the nodes. You could also use the function `nx.topological_sort(self)` ([Documentation](http://networkx.github.io/documentation/networkx-1.9.1/reference/generated/networkx.algorithms.dag.topological_sort.html)) to get a topological ordering of the nodes. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Plotting results"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Optionally, you can visualize the results from samples using the following code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def compute_marginals(samples):\n",
    "    ''' Computes marginal probabilities from samples'''\n",
    "    from collections import Counter\n",
    "    c = Counter()\n",
    "    for sample in samples:\n",
    "        c.update(sample)    \n",
    "    nsamples = len(samples)    \n",
    "    return  {k: float(v) / nsamples for k, v in c.iteritems()}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAW8AAAEACAYAAAB8nvebAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAADnxJREFUeJzt3X+s3fVdx/Hnay3gpiN1YtgsnRjoHFMgOK3AsngnhHVE\nhzFzTdVF5nSNsUh0ibhN3SUKColOFzLWkI5hsqwxkz/AIWTi6mb52fGzo62tptoWgoCMIWNZy97+\ncb6lp6f3nnN7e27bT+/zkZxwv9/zOed8CqdPPvdzzrk3VYUkqS2vOdoTkCQdOuMtSQ0y3pLUIOMt\nSQ0y3pLUIOMtSQ0aGe8kn03ydJLHh4z5VJJtSR5Nct54pyhJGjSTlffNwPLprkxyKXBmVS0FPgzc\nOKa5SZKmMTLeVfU14PkhQ94L3NKNvR9YlOTU8UxPkjSVcex5LwZ29h3vAk4bw/1KkqYxrhcsM3Ds\nZ+4laQ4tHMN97AaW9B2f1p07QBKDLkmzUFWDC+SxxPs2YDWwLsn5wDer6ulpJjCGhzu+TU5OMjk5\nebSnoVlKgt94zsRkd9FoB3UbmEG8k3wB+DnglCQ7gU8AJwBU1ZqquiPJpUm2Ay8BHxzbnCVJUxoZ\n76paOYMxq8czHUnSTPgJy2PMxMTE0Z6CdARMHO0JNC9Hah86SbnnreOde94av0z5gqUrb0lqkPGW\npAYZb0lqkPGWpAYZb0lqkPGWpAYZb0lqkPGWpAYZb0lqkPGWpAYZb0lqkPGWpAYZb0lqkPGWpAYZ\nb0lqkPGWpAYZb0lqkPGWpAYZb0lqkPGWpAYZb0lqkPGWpAYZb0lqkPGWpAYZb0lqkPGWpAYZb0lq\nkPGWpAYZb0lqkPGWpAYZb0lqkPGWpAYZb0lqkPGWpAaNjHeS5Um2JNmW5Koprj8lyZ1JHkmyKcnl\nczJTSdKrUlXTX5ksALYCFwO7gQeBlVW1uW/MJHBSVX00ySnd+FOrau/AfdWwx5KOB0kAn+cap1BV\nGTw7auW9DNheVTuqag+wDrhsYMxTwMnd1ycDzw2GW5I0XgtHXL8Y2Nl3vAv42YExNwH/kuRJ4PXA\n+8c3PUnSVEbFeybf/30MeKSqJpKcAXw5yblV9eLgwMnJyVe/npiYYGJi4hCmKknzwfruMtyoPe/z\ngcmqWt4dfxT4XlVd1zfmDuCaqtrQHd8NXFVVGwfuyz1vHffc89b4zW7PeyOwNMnpSU4EVgC3DYzZ\nQu8FTZKcCvw48J+HP2FJ0nSGbptU1d4kq4G7gAXA2qranGRVd/0a4Frg5iSP0vufwR9W1f/O8bwl\naV4bum0y1gdy20TzgNsmGr/ZbZtIko5BxluSGmS8JalBxluSGmS8JalBxluSGmS8JalBxluSGmS8\nJalBxluSGmS8JalBxluSGmS8JalBxluSGmS8JalBxluSGmS8JalBxluSGmS8JalBxluSGmS8JalB\nxluSGmS8JalBxluSGmS8JalBxluSGmS8JalBxluSGmS8JalBxluSGmS8JalBxluSGmS8JalBxluS\nGmS8JalBI+OdZHmSLUm2JblqmjETSR5OsinJ+rHPUpJ0gFTV9FcmC4CtwMXAbuBBYGVVbe4bswjY\nALy7qnYlOaWqnp3ivmrYY0nHgySAz3ONU6iqDJ4dtfJeBmyvqh1VtQdYB1w2MOZXgX+oql0AU4Vb\nkjReo+K9GNjZd7yrO9dvKfCGJF9JsjHJB8Y5QUnSwRaOuH4m3/+dAPwUcBHwOuDeJPdV1bbDnZwk\naWqj4r0bWNJ3vITe6rvfTuDZqnoZeDnJV4FzgYPiPTk5+erXExMTTExMHPqMJem4tr67DDfqBcuF\n9F6wvAh4EniAg1+wfCtwA/Bu4CTgfmBFVT0xcF++YKnjni9YavymfsFy6Mq7qvYmWQ3cBSwA1lbV\n5iSruuvXVNWWJHcCjwHfA24aDLckabyGrrzH+kCuvDUPuPLW+M3urYKSpGOQ8ZakBhlvSWqQ8Zak\nBhlvSWqQ8ZakBhlvSWqQ8ZakBhlvSWqQ8ZakBhlvSWqQ8ZakBhlvSWqQ8ZakBhlvSWqQ8ZakBhlv\nSWqQ8ZakBo367fFj1fsVUdL4+Kv1NF8d0Xj7u/00Xi4GNH+5bSJJDTLektQg4y1JDTLektQg4y1J\nDTLektQg4y1JDTLektQg4y1JDTLektQg4y1JDTLektQg4y1JDTLektQg4y1JDTLektSgkfFOsjzJ\nliTbklw1ZNzPJNmb5JfHO0VJ0qCh8U6yALgBWA68DViZ5Kxpxl0H3Im/3kSS5tyolfcyYHtV7aiq\nPcA64LIpxl0BfBF4ZszzkyRNYVS8FwM7+453dedelWQxvaDf2J3yF1VK0hwbFe+ZhPhvgD+q3q/x\nDm6bSNKcG/Xb43cDS/qOl9Bbffd7O7AuCcApwHuS7Kmq2w6+u8m+rye6iyRpv/XdZbj0FszTXJks\nBLYCFwFPAg8AK6tq8zTjbwZur6pbp7iu3FHReIVhz9+jobeIObbmpNaFqjpoR2Poyruq9iZZDdwF\nLADWVtXmJKu669fMyVwlSUMNXXmP9YFceWvsXHlrPph65e0nLCWpQcZbkhpkvCWpQcZbkhpkvCWp\nQcZbkhpkvCWpQcZbkhpkvCWpQcZbkhpkvCWpQcZbkhpkvCWpQcZbkhpkvCWpQcZbkhpkvCWpQcZb\nkhpkvCWpQcZbkhpkvCWpQcZbkhpkvCWpQcZbkhpkvCWpQcZbkhpkvCWpQcZbkhpkvCWpQcZbkhpk\nvCWpQcZbkhpkvCWpQcZbkhpkvCWpQcZbkho0o3gnWZ5kS5JtSa6a4vpfS/JokseSbEhyzvinKkna\nJ1U1fECyANgKXAzsBh4EVlbV5r4xFwBPVNULSZYDk1V1/sD9FAx/LOnQhFHP3yMtCT7PNV6hqjJ4\ndiYr72XA9qraUVV7gHXAZf0DqureqnqhO7wfOO1wpytJmt5M4r0Y2Nl3vKs7N50PAXcczqQkScMt\nnMGYGX8PmORdwG8C75h6xGTf1xPdRZK03/ruMtxM4r0bWNJ3vITe6vsA3YuUNwHLq+r5qe9qcgYP\nJ0nz2QQHLmyvnnLUTLZNNgJLk5ye5ERgBXBb/4AkbwZuBX69qrbPYraSpEMwcuVdVXuTrAbuAhYA\na6tqc5JV3fVrgD8FfhC4sfdqO3uqatncTVuS5reRbxUc2wP5VkGNnW8V1Hww+7cKSpKOMcZbkhpk\nvCWpQcZbkhpkvCWpQcZbkhpkvCWpQcZbkhpkvCWpQcZbkhpkvCWpQcZbkhpkvCWpQcZbkhpkvCWp\nQcZbkhpkvCWpQcZbkhpkvCWpQcZbkhpkvCWpQcZbkhpkvCWpQcZbkhpkvCWpQcZbkhpkvCWpQcZb\nkhpkvCWpQcZbkhpkvCWpQcZbkhpkvCWpQcZbkhpkvCWpQSPjnWR5ki1JtiW5apoxn+qufzTJeeOf\npiSp39B4J1kA3AAsB94GrExy1sCYS4Ezq2op8GHgxjma6zyx/mhPQDoC1h/tCTRv1Mp7GbC9qnZU\n1R5gHXDZwJj3ArcAVNX9wKIkp459pvPG+qM9AekIWH+0J9C8UfFeDOzsO97VnRs15rTDn5okaTqj\n4l0zvJ/M8naSpFlYOOL63cCSvuMl9FbWw8ac1p2bwmDjNbWrj/YEmpEci8+pY3FOxyKf54djVLw3\nAkuTnA48CawAVg6MuQ1YDaxLcj7wzap6evCOqspntCSNydB4V9XeJKuBu4AFwNqq2pxkVXf9mqq6\nI8mlSbYDLwEfnPNZS9I8lyq3pyWpNX7CchaSfDLJlX3HdyW5qe/4r5L8/jS3/Y0kb+o7Xpjk2iT/\nnuTh7vKxuf0TSHMjySvdc/ixJLcm+YER49+e5G+P1PyOJ8Z7dv4NuBAgyWuAH6L3IaZ9LgA2THPb\ny4Ef6Tv+c+CNwE9W1XnAO4ETBm+UzmHPXJpb366q86rqHOBbwKphg6vq61V15bAxmprxnp176QUa\n4CeATcCLSRYlOQk4CyDJ+iQbk9yZ5I1J3gf8NPD5JA8leR3wW8AVVfVdgKr6v6q6urv96Um2JrkF\neBxYkuTTSR5MsinJ5L4JJfnLJN/ofkTB9d25X0nyeJJHkvzrkfgXI/W5FzgDIMmyJPd0z/sNSd7S\nnZ9Icnv39WSSzyb5SpL/SHLFUZz7MW/Uu000hap6MsneJEvoRfxeeh9WuoDeamMz8Engsqp6NskK\n4Jqq+lCS3wU+UlUPJTkH+O+qemnIw50JfKCqHgBI8vGqer770QX/nORseu8E+qWqems35uTutn8C\nXFJVT/Wdk+Zc9/y8BLi7O7UZeGdVvZLkYuBa4H1T3PQtwLuAk4GtST5dVa8ciTm3xnjP3j30tk4u\nBP6aXrwvBF6g9z73S4AvdzsdC+gFdp8ptz+SXA5cSW8bZt/K/r/2hbuzIslv0/tv9yZ6q/wngO8k\nWQv8Y3eB3tbNLUn+Hrj1MP6s0ky9NsnD9P4+7AA+051fBPxdkjPpfYjvoK3B7vyXuh/F8VyS/wFO\n5cC/O+q4bTJ7G4B3AGfT29K4j/0x/xrwjW7v77yqOqeqlvfddt9bfLYDb973ok5Vfa7b936BXvCh\n9/ZLAJL8GPAR4Oer6lzgS8Bru5XJMuCLwC8Ad3b39zvAH9P7ENXXk7xhzP8OpEEvd8/hHwW+w/6f\nhfRnwN1VdTbwi8D3TXP77/Z9/QouMKdlvGfvHnqhfK56nqe3urgA+ALww92HlkhyQpJ9L2i+SO9b\nQqrq28Ba4IZur3zft5snTvOYJ9OL+be6H/71HqCSfD+wqKr+CfgD4Nzuvs6oqgeq6hPAM/gzZ3SE\nVNXLwO8B13QvtJ/M/hX0dJ8F8QX5Q2C8Z28Tve2N+/rOPUbvE6bP0NvPuy7JI8DD7N8G+Rzwme6F\nm5OAjwNPAZuSPAR8tRvzVDf+1TfiV9Wj3X1tAT5P710vAK8Hbk/yKL1V/763KV7fvWXrcWBDVT02\npj+7NJ3+5+sj9L67fD9wPfAX3XN8AQf+/KPq+6cfPJkhP6QjSQ1y5S1JDTLektQg4y1JDTLektQg\n4y1JDTLektQg4y1JDTLektSg/wdatKUwVz0+2AAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f28255df650>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "samples = [dict(Rain=True, WetGrass=False), dict(Rain=True, WetGrass=True)]  # put your samples here\n",
    "D = compute_marginals(samples)\n",
    "plt.bar(range(len(D)), D.values(), align='center')\n",
    "plt.xticks(range(len(D)), D.keys());"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exercise 5: Computing probabilities by sampling (Rejection Sampling) [15 P.]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Rejection sampling is perhaps the simplest algorithm to compute approximations for more advanced probabilistic queries. \n",
    "Just as in a previous exercise, the input to the `rejection_sampling` function is the state of the *query* variables and the *conditioned* variables in the form of a dictionary with their truth value each. The variables that are neither query nor conditioned are of no interest. \n",
    "\n",
    "Use rejection sampling to compute an approximation of the probability $P(query\\, | \\, conditioned)$.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "** Implement the function rejection_sampling **\n",
    "\n",
    "This is an example function call:\n",
    "```\n",
    "rejection_sampling(bn, dict(WetGrass=True, Rain=False), dict(Cloudy=True), 100)\n",
    "```\n",
    "\n",
    "The function should return a single number as the approximate probability. `num_samples` is the total number of samples that should be drawn to get the approximate probability."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "def rejection_sampling(bn, query, conditioned, num_samples):    \n",
    "    '''Computes an approximation to the probability for P(query | conditioned) '''\n",
    "    if num_samples < 1:\n",
    "        return 0\n",
    "\n",
    "    c1 = 0\n",
    "    c2 = 0\n",
    "\n",
    "    for i in xrange(num_samples):\n",
    "        sample = set(bn.forward_sample().items())\n",
    "\n",
    "        if set(conditioned.items()) <= sample:\n",
    "            c2 += 1\n",
    "            if set(query.items()) <= sample:\n",
    "                c1 += 1\n",
    "\n",
    "    return c1 * 1.0 / c2\n",
    "\n",
    "        "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.9"
  },
  "name": "Assignment_4_bayNet"
 },
 "nbformat": 4,
 "nbformat_minor": 0
}